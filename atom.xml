<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Awesome Notes</title>
  
  <subtitle>By Sanket Gandhi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://sanketgandhi.github.io/"/>
  <updated>2017-12-10T11:30:23.535Z</updated>
  <id>http://sanketgandhi.github.io/</id>
  
  <author>
    <name>Sanket Gandhi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript Feeling</title>
    <link href="http://sanketgandhi.github.io/2017/12/10/JavaScript-Feeling/"/>
    <id>http://sanketgandhi.github.io/2017/12/10/JavaScript-Feeling/</id>
    <published>2017-12-10T10:59:35.000Z</published>
    <updated>2017-12-10T11:30:23.535Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript ecosystem has grown a lot. Gone are the days of saying that “JavaScript is for validation purpose only” No dude, you are living in 20th century. </p><p>Everyday there is new lib, everyday there is new tool. If JavaScript go on vacation for your project then when you come back, you will feel like you really missed something and you need to update your knowledge. Till you learn new things there are other things that came in the ecosystem. Wow, Congratulation! Now you have to deal with this too.</p><p>So, I feel like what if someone is new in the JavaScript and want to learn this things. How they can learn this.</p><p>I came across excellent post by Mr. Addy Osmani, he said, <strong>“First Do it. Then do it right. Then do it better”</strong>.</p><p>“<strong>First do it</strong>: Take a breath and acknowledge that you’re totally new to a space. It’s okay not to use everything. In fact, it’s better if you don’t. Get a simple prototype built that does the trick. <strong>Nothing wrong with straight-up using HTML/CSS/JS</strong>.</p><p>We don’t acknowledge enough that it takes time, experimentation and skill to master the fundamentals of any new topic. Beginners shouldn’t feel like they’re failing if they’re not using the library-du-jour or reactive-pattern of the week. It took me weeks to get Babel and React right. Longer to get Isomorphic JS, WebPack and all of the other libraries around it right. <strong>Start simple and build on that base.</strong></p><p><strong>Then do it right</strong>: Iterate. Improve on what you’ve got. See a problem that you keep having to solve? Maybe layer in a small library/module to help with it. There is zero reason to be worrying about rewriting your project in another language or framework nor adopting any more tooling unless it helps you move the needle forward on your project. Everything you add to your project should really be offering value. If it’s complicating things or making it harder for you or your team to get a job done, get rid of it.</p><p><strong>Then do it better</strong>: <strong>master your craft</strong>. Once you’re comfortable navigating the waters of the tools and libraries you know for sure add value to your workflow, you’ll find that including them as a default “just make sense”. I’m heavily using 9–10 different tools in my project these days but I’ve learned enough about how to avoid their rough edges that they save me time. I would never suggest a beginner use most of the things in this post right off the bat. It’s a recipe for pain. Instead, get the basics right. Slowly become familiar with tools that add value and then use what helps you get and stay effective.</p><p><strong>It’s also worth noting: everyone — even the people writing the tools and libraries mentioned in this post — go through the same feelings of fatigue and frustration learning, debugging and staying up to date with modern JavaScript. I’d encourage folks to remember we’re all in the same boat and our tools are here to help us. If they’re not doing that, we should get them out of the way :)</strong>“ - Addy Osmani</p><p>This is really true! Do it this way you will find your own way of doing the things. This is not only related to technology but day-today task too. Think on it!</p><p>Happy Coding! ☺ </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;JavaScript ecosystem has grown a lot. Gone are the days of saying that “JavaScript is for validation purpose only” No dude, you are livin
      
    
    </summary>
    
      <category term="General" scheme="http://sanketgandhi.github.io/categories/General/"/>
    
    
      <category term="Motivation" scheme="http://sanketgandhi.github.io/tags/Motivation/"/>
    
  </entry>
  
  <entry>
    <title>Git and Github</title>
    <link href="http://sanketgandhi.github.io/2017/11/26/Git-and-Github/"/>
    <id>http://sanketgandhi.github.io/2017/11/26/Git-and-Github/</id>
    <published>2017-11-26T16:02:13.000Z</published>
    <updated>2017-11-26T18:05:40.771Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul><li>Git is version control system (VCS)</li><li>It keep track of changes you made to your code such as adding or deleting code or files</li><li>It make it easy for developer to collaborate</li><li>It allowes developer to revert the changes at any moment</li></ul><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li>It is a company which provide services to host your source code in repositories</li><li>It uses git as version control system and hence it integrates really well with it</li><li>Hence we use <strong>git</strong> command to talk to Github repos</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git&quot;&gt;&lt;a href=&quot;#Git&quot; class=&quot;headerlink&quot; title=&quot;Git&quot;&gt;&lt;/a&gt;Git&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Git is version control system (VCS)&lt;/li&gt;
&lt;li&gt;It keep track o
      
    
    </summary>
    
    
      <category term="git" scheme="http://sanketgandhi.github.io/tags/git/"/>
    
      <category term="github" scheme="http://sanketgandhi.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Httpbin</title>
    <link href="http://sanketgandhi.github.io/2017/09/01/Httpbin/"/>
    <id>http://sanketgandhi.github.io/2017/09/01/Httpbin/</id>
    <published>2017-09-01T00:30:00.000Z</published>
    <updated>2017-11-26T17:08:57.600Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Use case</strong> - If you need a test server that accepts the request for basic information via <code>HTTP GET</code> and also allow you to <code>POST</code>.<br>(Though the <code>POST</code> request not doing anything)</p><p>Solution is <a href="http://httpbin.org/" target="_blank" rel="noopener">Httpbin</a></p><p><a href="https://httpbin.org/" target="_blank" rel="noopener">Reference with doc</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;Use case&lt;/strong&gt; - If you need a test server that accepts the request for basic information via &lt;code&gt;HTTP GET&lt;/code&gt; and also a
      
    
    </summary>
    
    
      <category term="API" scheme="http://sanketgandhi.github.io/tags/API/"/>
    
      <category term="Mock" scheme="http://sanketgandhi.github.io/tags/Mock/"/>
    
  </entry>
  
  <entry>
    <title>Error Handling in NodeJs</title>
    <link href="http://sanketgandhi.github.io/2017/01/01/Nodejs-Error-Handling-Practices/"/>
    <id>http://sanketgandhi.github.io/2017/01/01/Nodejs-Error-Handling-Practices/</id>
    <published>2017-01-01T11:37:36.000Z</published>
    <updated>2017-12-10T10:35:07.861Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>It is important to realize that in any Node.js application handling of uncaught errors is not done automatically. There is no global domain set by default. If an error is emitted somewhere in the guts of your application and there is no error handler above it somewhere in the call stack, that error can bring down a Node process and may have direct consequences for application stability. <a href="https://www.signal.co/dev-log/exception-handling-node-js/" target="_blank" rel="noopener">Refer here</a></p></blockquote><ul><li><p><strong>Tag your errors</strong> - Whenever you catch an error, specify within the error object whether its a safe/trusted/operational error or unknown/developer error, then throw it. <a href="http://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/" target="_blank" rel="noopener">See best practice number 2 here</a></p></li><li><p><strong>Catch all API errors and decide weather they are safe</strong> - At your API end-points use promises and try-catch all errors, forward the errors to express error handler, there decide whether this is a known/trusted (see above point) error - then just return some HTTP status and error to the caller. If the error is unknown - throw it and let step 3 (below point) handle it. <a href="http://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/" target="_blank" rel="noopener">See best practice number 4 here</a></p></li><li><p><strong>Centrally catch leftovers and restart</strong> - Using <code>process.onuncaughexpcetion</code> process all uncaught errors, if the error is not marked as safe (see step 1), then exit the process and let your process manager take care to restart <a href="http://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/" target="_blank" rel="noopener">See best practice number 6 here</a></p></li><li><p>Use try-catch only for <code>JSON.parse()</code> statement. Don’t use this in other scenarios</p></li><li><p>Use custom errors like,</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">MountainError</span>(<span class="params">message</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">Error</span>.captureStackTrace(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.messahe = message;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"MountainError"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    MountainError.prototype = <span class="built_in">Object</span>.create(<span class="built_in">Error</span>.prototype);</span><br><span class="line">     <span class="string">``</span><span class="string">`  </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- Always deal in `</span><span class="built_in">Error</span><span class="string">` object. Beacuse it helps to stack trace the issues</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- `</span>process.on(<span class="string">'uncaughtException'</span>)<span class="string">` must always do `</span>process.exit()<span class="string">`. Because when this type of error occured then that conncetion reamins open like db connections or security issues may occur. It is good pratice to exit that process.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- Don't `</span><span class="keyword">throw</span><span class="string">` the errors in the node app</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- try/catch will only catch exceptions thrown synchronously. The I/O error will not be handled. File reading will not be handle. For e.g.</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    fs.open(“file.txt”, <span class="function"><span class="keyword">function</span> (<span class="params">contents</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(contents);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125; <span class="keyword">catch</span>(<span class="built_in">Error</span> e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">"An error occured!"</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">- There are a large number of third-party logging libraries available for Node.js. In this guide, we’re going to look at three: *Winston, Bunyan, and Node-Loggly*. [Check this guide to use this library](https://www.loggly.com/ultimate-guide/category/node/)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">---</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">## Examples</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">~ Always try to use error handler middlewares.</span></span><br><span class="line"><span class="string">#### Example - 1</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="comment">// Every single route in an application will require this module and it should called whenever programmer need to handle any error</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handleError</span>(<span class="params">err, req, res</span>) </span>&#123;</span><br><span class="line">    logError(err);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> message = err ? err.message : <span class="string">"Internal Server Error"</span>;</span><br><span class="line"></span><br><span class="line">    res.json(&#123;</span><br><span class="line">        error: &#123;<span class="attr">message</span>: message&#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">logError</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(&#123;</span><br><span class="line">            message: error.message,</span><br><span class="line">            stack: error.stack</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// On client side you just need to call this function </span></span><br><span class="line">app.get(<span class="string">'mountains/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    db.get(req.params.id, <span class="function"><span class="keyword">function</span>(<span class="params">err, user</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(err) &#123;</span><br><span class="line">            <span class="comment">// Pass all the information that you want to log </span></span><br><span class="line">            <span class="keyword">return</span> handleError(err, req, res);</span><br><span class="line">        &#125;</span><br><span class="line">        res.json(user);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example - 2"></a>Example - 2</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Error handler middle wares have 4 parameters and look like this:</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span>(<span class="params">err, req, res, next</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(err.stack);</span><br><span class="line">    res.send(<span class="number">500</span>, <span class="string">'Something broke!'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// The error handlers would typically sit at the bottom of the stack (below other app.use) and the way to send errors is by using the third parameter of typical middleware:</span></span><br><span class="line"></span><br><span class="line">app.use(<span class="function"><span class="keyword">function</span> (<span class="params"> req, res, next </span>) </span>&#123;</span><br><span class="line">    next(<span class="string">'it blew'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>There is one last resort in node for catching uncaught exceptions before it exits the process. It’s the <code>uncaughtException</code> event in the process object. Putting the following code at the top of the file will cause the program to exit more gracefully:</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">process.on(<span class="string">'uncaughtException'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"> err </span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.error(<span class="string">'An uncaughtException was found, the program will end.'</span>);</span><br><span class="line">    <span class="comment">//hopefully do some logging.</span></span><br><span class="line">    process.exit(<span class="number">1</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>Unfortunately, this is not a silver bullet, and should not be used for handling errors in your node.js app. It’s merely for being able to report the problem, and shut down gracefully. The state of the app is not guaranteed to be consistent, so the app should be restarted.</p><p>Resource - </p><ol><li><a href="https://github.com/xjamundx/error-handling" target="_blank" rel="noopener">Examples to handle errors-1</a></li><li><a href="https://github.com/imperugo/NodeJs-Sample" target="_blank" rel="noopener">Examples to handle errors-2</a></li><li><a href="http://goldbergyoni.com/checklist-best-practices-of-node-js-error-handling/#codesyntax_17" target="_blank" rel="noopener">Best Pratices</a> </li><li><a href="http://www.jyotman.xyz/post/logging-in-node.js-done-right" target="_blank" rel="noopener">Logging in node.js done right</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;It is important to realize that in any Node.js application handling of uncaught errors is not done automatically. There is n
      
    
    </summary>
    
      <category term="NodeJS" scheme="http://sanketgandhi.github.io/categories/NodeJS/"/>
    
    
      <category term="NodeJS" scheme="http://sanketgandhi.github.io/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>Best Practices in JavaScript and it&#39;s framework</title>
    <link href="http://sanketgandhi.github.io/2016/09/01/Best-Practices-in-JavaScript/"/>
    <id>http://sanketgandhi.github.io/2016/09/01/Best-Practices-in-JavaScript/</id>
    <published>2016-09-01T00:36:00.000Z</published>
    <updated>2017-12-10T09:43:40.708Z</updated>
    
    <content type="html"><![CDATA[<p>There are standard practices that JavaScript Developer need to follow. If you<br>are following these things then you probably will not end up in optimizing your<br>code and checking performance.</p><p>Okay, let’s see some tricks to avoid gotcha in our code.</p><ul><li>All views or html files should contain on load method. There is reason behind this, when we require any global scope object (variable or array) then we go on header and just define it. This is not optimized way to write code. Instead, have <code>onLoad()</code> method and define local scope object under this method so that when method get executed then global variable will be catch by garbage collector.</li></ul><p>For ExtJs, use <code>Ext.onReady()</code></p><ul><li><p>Remove unnecessary all global variables. If global variables are defined then on close event of window assign null to global variables and arrays. And use ‘delete’ keyword to delete objects. On view load, code which is in success method of ajax should be optimized. Too much code on success will freeze browser and result in slowness.</p></li><li><p>Every combo should include following config to remove unnecessary request for the same combo <code>queryMode: local;</code></p></li><li><p>Don’t load combo on page (if not needed), instead load it on click of combo.</p></li><li><p>Avoid looping in javascript. Still want to use, try this :- for loop instead of <code>Ext.each</code></p></li><li><p>Use following config to destroy stores <code>autoDestroy: true;</code> (This method is not documented. Its private method. But we can use it our current extjs 4.1.3 version)</p></li><li><p>Use thumbnails instead of big size Images and give width and height attributes to img tag</p></li><li><p>While giving width / height for any component, Give it in percentage. Don’t give height / width hardcoded (for ex, height: 30)</p></li><li><p>Don’t create nested structure of containers for design purpose.</p></li><li><p>Try to use container instead of panels</p></li><li><p>Try to use default config of component. Don’t repeat code in child items e.g.</p></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> toolbar = Ext.create(<span class="string">'Ext.toolbar.Toolbar'</span>, &#123;</span><br><span class="line">    defaults  : &#123;</span><br><span class="line">        margin:<span class="string">'0 10 0 0'</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    items:[</span><br><span class="line">        &#123; ---  &#125;,&#123; ---  &#125;,&#123; ---  &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li><p>While defining store, use storeId instead of id. You can access store by using <code>Ext.getStore(‘StoreId’)</code></p></li><li><p>While defining listeners to any component then do use boxready() instead of afterrender()</p></li><li><p>Whenever we are using store.remove() to remove record from store, use <code>store.removed.length = 0;</code></p></li></ul><p>Happy Coding :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There are standard practices that JavaScript Developer need to follow. If you&lt;br&gt;are following these things then you probably will not en
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/tags/JavaScript/"/>
    
      <category term="ExtJS" scheme="http://sanketgandhi.github.io/tags/ExtJS/"/>
    
  </entry>
  
  <entry>
    <title>ABCs of Regular Expression</title>
    <link href="http://sanketgandhi.github.io/2016/06/26/Regular-Expressions/"/>
    <id>http://sanketgandhi.github.io/2016/06/26/Regular-Expressions/</id>
    <published>2016-06-26T17:10:09.000Z</published>
    <updated>2017-11-26T18:05:34.571Z</updated>
    
    <content type="html"><![CDATA[<h1 id="About-RegEx"><a href="#About-RegEx" class="headerlink" title="About RegEx"></a>About RegEx</h1><p>There are lot of programmer in world use RegEx just because his/her boss or friend or anybody ask him to use. But we should know why it is good to know RegEx.<br>Let’s say we need to check phone number of people like 444-235-1234. So here, first 3 digit may be code and then there is <code>-</code> then again 3 digit and again<code>-</code> and so on. User may enter 10 digit phone number directly without any hyphen. </p><p>So there is one option to check this, IF CONDTION. Write conditions in OR expression and get result. But it is complex to write and read it. There is also chance to get bug in this condition. So here we can use RegEx</p><h2 id="How-to-use-RegEx"><a href="#How-to-use-RegEx" class="headerlink" title="How to use RegEx"></a>How to use RegEx</h2><blockquote><p>Note that, in every language there is different way to use this. So I love JS so here it is ✨</p></blockquote><h3 id="Name-or-UserName-validation"><a href="#Name-or-UserName-validation" class="headerlink" title="Name or UserName validation"></a>Name or UserName validation</h3><ul><li>Every expression in Regex start with forward slash (/) and end with forward slash For example, I want match my name then</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myName = <span class="string">'sanket'</span>;</span><br><span class="line">myName.match(<span class="regexp">/regular expression/</span>);</span><br></pre></td></tr></table></figure><ul><li><p>We can place OR <code>|</code> symbol in between RegEx to match the string. For e.g <code>/san|sanket|ket/</code></p></li><li><p>If we want to match alphabets then we can write RegEx as <code>/[a-z]/</code></p></li><li><p>Note that in above RegEx, we are grouping a to z characters and it will match only one character. To match one more character we have to use <code>+</code> operator (i.e. Quantifiers). For e.g, we want to match character say <code>ar</code>, <code>arr</code>, <code>arrr</code> etc. Then we can write RegEx as <code>/ar+/</code> This will match single <code>a</code> with one or more <code>r</code>.</p></li><li><p>So above RegEx will be <code>/[a-z]+/</code>. This RegEx will match any small-case character between a to z. What if we want to match between A to Z. Then we can also add another group like <code>/[a-zA-Z]+/</code>. This can match any alphabet between a to z OR A to Z.</p></li><li><p>There is one more way to write above RegEx, <code>/[a-z]+/i</code> <code>i</code> is modifier, that means <strong>case insensitive</strong> which will match upper case and lower case</p></li><li><p>Now if we want to match whitespace then aboe RegEx will return false. So to do that we can use <code>/s</code> which includes white space, new line, tab. so our RegEx will be,<code>/[a-z/s]+/i OR /[/sa-z]+/i</code>. Now of course to use digit RegEx wll be <code>/[a-z/s0-9]+/i</code></p></li><li><p>We can refactor our character set, we can use <code>\w</code> is same as <code>[a-zA-Z0-9]</code>. So above RegEx will be <code>/[\w/s]+/</code>. </p></li></ul><p>Cool, Right!</p><h3 id="Email-Validation"><a href="#Email-Validation" class="headerlink" title="Email Validation"></a>Email Validation</h3><ul><li><p>Lets say we have to match email address then our character set will be <code>/\w@\w/</code>. But this going match only 1 word-like character. So we need to add <code>+</code>, <code>/\w+@\w/</code></p></li><li><p>Above RegEx will match only someone@example email address omeone@example.com</p></li><li><p>So to match <code>.</code> (dot) then RegEx will be, <code>/\w+@\w+./</code> and again for ‘com’ RegEx will be, <code>/\w+@\w+.\w+/</code></p></li><li><p>But above RegEx will also match <code>!</code> instead of dot so, we need to escape dot so, <code>/\w+@\w+\.\w+/</code><br>Not that <code>.</code> in RegEx means this is wildcard which matches any character except newline<br>But in above regex there is one problem email id can be com | net | edu | org. We can’t put any other word instead of above one so our regex will be, <code>/\w+@\w+\.(com|org|net|edu)/i</code></p></li><li><p>We need to make sure that there should be nothing garbage between start and end of email address. so to do that we have another symbol<br><code>^</code> : start looking at beginning of string/email<br><code>$</code> : stop looking at end of string/email</p></li><li><p>So our final Email RegEx will be,<br>/^\w+@\w+.(com|org|net|edu)$/i</p></li></ul><h3 id="Other"><a href="#Other" class="headerlink" title="Other"></a>Other</h3><ul><li><p><code>?</code> is use to make character set optional and <code>\b</code> is use to match whole word. For e.g. We want to match ok, okay, okiee. Then regex will be <code>/\bok(ay)?\b/i</code></p></li><li><p><code>^</code> means ‘not’  when place in character set</p></li><li><p><code>\d</code> means ‘any number, so /[^\d]+/i means ‘anything that’s not number’</p></li><li><p><code>[^\d]</code> is same as <code>\D</code> : match every character except number (This is shorthand operator)</p></li><li><p><code>[^\s]</code> is same as <code>\S</code> : match every character except whitespace (This is shorthand operator)</p></li><li><p>Lets say if we want to match just specific pattern to 2 time then regex will be <code>\[a-z]{2}\</code>. So regex will match any character b/w a-z exactly 2 times.we can specify range like, <code>[a-z]{1,3}</code> this will match the character in string a minimum of 1 time or maximum 3 time</p></li></ul><p>Happy Coding 🔥</p><h1 id="E-mail-regular-expression"><a href="#E-mail-regular-expression" class="headerlink" title="E-mail regular expression"></a>E-mail regular expression</h1><p>Following regular expressions that validate e-mail addresses in order to find the best one. It matches most of email address</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?))&#123;<span class="number">255</span>,&#125;)(?!(?:(?:\x22?\x5C[\x00-\x7E]\x22?)|(?:\x22?[^\x5C\x22]\x22?))&#123;<span class="number">65</span>,&#125;@)(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22))(?:\.(?:(?:[\x21\x23-\x27\x2A\x2B\x2D\x2F-\x39\x3D\x3F\x5E-\x7E]+)|(?:\x22(?:[\x01-\x08\x0B\x0C\x0E-\x1F\x21\x23-\x5B\x5D-\x7F]|(?:\x5C[\x00-\x7F]))*\x22)))*@(?:(?:(?!.*[^.]&#123;<span class="number">64</span>,&#125;)(?:(?:(?:xn--)?[a-z0<span class="number">-9</span>]+(?:-[a-z0<span class="number">-9</span>]+)*\.)&#123;<span class="number">1</span>,<span class="number">126</span>&#125;)&#123;<span class="number">1</span>,&#125;(?:(?:[a-z][a-z0<span class="number">-9</span>]*)|(?:(?:xn--)[a-z0<span class="number">-9</span>]+))(?:-[a-z0<span class="number">-9</span>]+)*)|(?:\[(?:(?:IPv6:(?:(?:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(?::[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">7</span>&#125;)|(?:(?!(?:.*[a-f0<span class="number">-9</span>][:\]])&#123;<span class="number">7</span>,&#125;)(?:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(?::[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">5</span>&#125;)?::(?:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(?::[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">5</span>&#125;)?)))|(?:(?:IPv6:(?:(?:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(?::[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">5</span>&#125;:)|(?:(?!(?:.*[a-f0<span class="number">-9</span>]:)&#123;<span class="number">5</span>,&#125;)(?:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(?::[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">3</span>&#125;)?::(?:[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;(?::[a-f0<span class="number">-9</span>]&#123;<span class="number">1</span>,<span class="number">4</span>&#125;)&#123;<span class="number">0</span>,<span class="number">3</span>&#125;:)?)))?(?:(?:<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(?:<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>])|(?:<span class="number">1</span>[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)|(?:[<span class="number">1</span><span class="number">-9</span>]?[<span class="number">0</span><span class="number">-9</span>]))(?:\.(?:(?:<span class="number">25</span>[<span class="number">0</span><span class="number">-5</span>])|(?:<span class="number">2</span>[<span class="number">0</span><span class="number">-4</span>][<span class="number">0</span><span class="number">-9</span>])|(?:<span class="number">1</span>[<span class="number">0</span><span class="number">-9</span>]&#123;<span class="number">2</span>&#125;)|(?:[<span class="number">1</span><span class="number">-9</span>]?[<span class="number">0</span><span class="number">-9</span>])))&#123;<span class="number">3</span>&#125;))\]))$/iD</span><br></pre></td></tr></table></figure><p>For Javascript -</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[-a-z0<span class="number">-9</span>~!$%^&amp;*_=+&#125;&#123;\<span class="string">'?]+(\.[-a-z0-9~!$%^&amp;*_=+&#125;&#123;\'?]+)*@([a-z0-9_][-a-z0-9_]*(\.[-a-z0-9_]+)*\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-z][a-z])|([0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;\.[0-9]&#123;1,3&#125;))(:[0-9]&#123;1,5&#125;)?$/i</span></span><br></pre></td></tr></table></figure><p>Test Cases are <a href="https://fightingforalostcause.net/content/misc/2006/compare-email-regex.php" target="_blank" rel="noopener">Here</a></p><p>Happy Coding 🔥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;About-RegEx&quot;&gt;&lt;a href=&quot;#About-RegEx&quot; class=&quot;headerlink&quot; title=&quot;About RegEx&quot;&gt;&lt;/a&gt;About RegEx&lt;/h1&gt;&lt;p&gt;There are lot of programmer in wor
      
    
    </summary>
    
    
      <category term="RegEx" scheme="http://sanketgandhi.github.io/tags/RegEx/"/>
    
  </entry>
  
  <entry>
    <title>ExtJS Check Combo Plugin</title>
    <link href="http://sanketgandhi.github.io/2015/09/26/Check-Combo-Custom-Plugin-ExtJS/"/>
    <id>http://sanketgandhi.github.io/2015/09/26/Check-Combo-Custom-Plugin-ExtJS/</id>
    <published>2015-09-26T17:50:52.000Z</published>
    <updated>2017-12-10T10:32:12.853Z</updated>
    
    <content type="html"><![CDATA[<p>In ExtJs framework, we don’t have xtype which will give feature for multi-check<br>option in combo list. I have made two new plugin.</p><p>Following is the detail information for the new xtype</p><p><strong>Ext.ux.PerCheckCombo</strong></p><p><code>xtype: percheckcombo</code></p><p>This plugin will provide checkcombo ( Checkbox as a list in combobox ) which<br>have extra facility of disableFieldFeature.</p><p>If <code>disableFieldFeature = false</code> then it will work like checkcombo</p><p>or</p><p><code>disableFieldFeature = true</code> then it will have checkcombo with particular<br>checkbox disable.</p><p>To access disableFieldFeature you should have to specify extra disablefield in<br>store (shown in example).</p><h2 id="Features"><a href="#Features" class="headerlink" title="Features"></a>Features</h2><ul><li><p>multi select using checkboxes</p></li><li><p>Can be used in a form</p></li><li><p>Checkbox can be disable/enable as per requirement</p></li></ul><p><strong>New config</strong> is added for checkbox disable <code>disableFieldFeature: true</code></p><p>Here is<br><a href="https://gist.github.com/sanket876/89cb814b4cd62e2bd69c" target="_blank" rel="noopener">example with plugin</a><br>**</p><p><strong>Happy Coding</strong> 🔥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;In ExtJs framework, we don’t have xtype which will give feature for multi-check&lt;br&gt;option in combo list. I have made two new plugin.&lt;/p&gt;

      
    
    </summary>
    
      <category term="ExtJS" scheme="http://sanketgandhi.github.io/categories/ExtJS/"/>
    
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/tags/JavaScript/"/>
    
      <category term="ExtJS" scheme="http://sanketgandhi.github.io/tags/ExtJS/"/>
    
  </entry>
  
  <entry>
    <title>Garbage collection in JavaScript</title>
    <link href="http://sanketgandhi.github.io/2015/09/26/Garbage-Collection-in-JavaScript/"/>
    <id>http://sanketgandhi.github.io/2015/09/26/Garbage-Collection-in-JavaScript/</id>
    <published>2015-09-26T17:47:42.000Z</published>
    <updated>2017-12-10T10:18:59.546Z</updated>
    
    <content type="html"><![CDATA[<p>There is different behavior of garbage collector in different programming languages.  We will see how exactly garbage collector works in JavaScript.</p><p>Lots of programmer stated that we can not run garbage collector manually, it runs automatically by the browser. This is some what correct BUT if we want to run GC manually then through browser <strong>we can run it</strong>. <strong>So Read on</strong>, </p><hr><h2 id="Here-we-have-some-good-code-practices-for-GC"><a href="#Here-we-have-some-good-code-practices-for-GC" class="headerlink" title="Here we have some good code practices for GC"></a>Here we have some good code practices for GC</h2><ul><li>Try to AVOID global variables. It will surely save your ass.</li><li>Declare variables inside function so that when its scope get over then garbage collector (GC) should catch it.  </li><li><p>GC only collects if,</p><pre><code>- Variable or array is set to null  - Scope get over  - object is deleted  </code></pre></li><li><p>In ExtJs, try to define all your variable’s / object / arrays inside function. If global scope is needed then define it in Ext.onReady() method.</p></li><li><p>If global variable / array is used then before winding up with your file just null your variables and arrays.  </p></li><li><p>If global object are defined DON’T assign it to null because it never going to catch by GC so for object use delete keyword.  </p></li><li><p>We can profile js code using chrome profiler</p></li></ul><p>In browser there is root object called window. All other object, variable, array are attached to window through links. So if we are creating any object then one node will get add to root tree.  </p><p>GC collects only those people who is not reachable from window object. If link between window and object is available then GC will never gonna collect it  </p><p>WE CAN’T RUN GARBAGE COLLECTOR MANUALLY. It will get run automatically when browser heap size is near about to full else timeout.  (Generally it run on chrome after 10ms, as far as i read)  </p><h4 id="Okay-let-me-tell-you-how-to-run-GC-through-browser"><a href="#Okay-let-me-tell-you-how-to-run-GC-through-browser" class="headerlink" title="Okay, let me tell you how to run GC through browser."></a>Okay, let me tell you how to run GC through browser.</h4><ul><li>Open <code>Developer tool</code> by in going in options in google chrome (or simply press F12)</li><li>Then go to <code>Timeline</code> tab then there is one dustbin like button. This is used to run GC manually.</li><li>Start recording and stop it after few second. It will show timeline and memory consumption and lot more things.</li><li>Now Press GC button and again start recording</li><li>you will see big difference in both timeline (if you have a lot of memory leakage, dangling pointer etc)</li></ul><p><strong>Happy coding</strong> 🔥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;There is different behavior of garbage collector in different programming languages.  We will see how exactly garbage collector works in 
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Console.log() and it&#39;s various methods</title>
    <link href="http://sanketgandhi.github.io/2015/09/22/Console-Log/"/>
    <id>http://sanketgandhi.github.io/2015/09/22/Console-Log/</id>
    <published>2015-09-22T17:55:00.000Z</published>
    <updated>2017-12-10T10:32:39.354Z</updated>
    
    <content type="html"><![CDATA[<p><code>console.clear()</code></p><ul><li>Used to clear console</li></ul><p><code>console.log(‘something’)</code></p><ul><li>To log something on console</li></ul><p><code>Console.time(‘GiveName’)</code> AND <code>console.timeEnd(‘GiveName’)</code></p><ul><li>Used to calculate time required to execute code in between console.time and console.timeEnd.</li><li>It give time in millisecond</li></ul><p><code>console.profile(‘GiveName’)</code> AND <code>console.profileEnd(‘GiveName’)</code></p><ul><li>To start profile</li><li>It shows profile in profile tab with given name</li></ul><p><code>console.assert(expression, message)</code></p><ul><li>If the value passed in the first argument is false, the function will log a message given as the second argument in the web console. If the expression is true, nothing is logged.</li></ul><p><code>console.table(object)</code> AND <code>console.table(array,[“name”,”address”]);</code></p><ul><li>This function displays the provided object or array as a table</li><li>You can also restrict table to console only certain property by following way</li></ul><p><code>console.group(message)</code> AND <code>console.groupEnd(message)</code></p><ul><li>The console.group(message) groups all logs that follow after it until the console.groupEnd()is called to a dropdown list. Lists can be nested.</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;console.clear()&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Used to clear console&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;console.log(‘something’)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To log s
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://sanketgandhi.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Screen In Linux</title>
    <link href="http://sanketgandhi.github.io/2015/09/19/Screen-In-Linux/"/>
    <id>http://sanketgandhi.github.io/2015/09/19/Screen-In-Linux/</id>
    <published>2015-09-19T18:06:55.000Z</published>
    <updated>2017-12-10T10:33:18.159Z</updated>
    
    <content type="html"><![CDATA[<p>We most probably use terminal in linux for various things to do, Because linux have power to do anything. So let’s see what exactly screen means.</p><p>You can keep your session running when you disconnect from SSH. Screen is like window manager for your console. It allows you to keep multiple terminal session open and easily switch between them.</p><p>Screen also protects you from disconnect, because screen session doesn’t get disconnect when you disconnect.(Tip - For windows user you have to install <a href="http://www.putty.org/" target="_blank" rel="noopener">putty</a> for SSH)</p><p>To start with, you have to make sure that screen is installed on your server. If your running on local machine then go ahead and install screen by below commands.</p><h2 id="Installation"><a href="#Installation" class="headerlink" title="Installation"></a>Installation</h2><p>To install screen on ubuntu 14.04 go in terminal by using following command you can install it.</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install screen</span><br></pre></td></tr></table></figure><h3 id="Commands"><a href="#Commands" class="headerlink" title="Commands"></a>Commands</h3><ul><li>To start new screen</li></ul><p><code>screen -s &lt;screenName/screenId&gt;</code></p><ul><li>To view all screen</li></ul><p><code>screen -ls</code></p><ul><li><p>To detach from screen session. Detach screen means, we can keep that screen session as it is. <code>ctrl+a+d</code></p></li><li><p>Reattach to screen</p></li></ul><p><code>screen -r &lt;screenName/screenId&gt;</code></p><ul><li>To remove screen</li></ul><p><code>screen -X -R &lt;screenName/screenId&gt;</code></p><p><strong>Happy Coding</strong> 🔥</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;We most probably use terminal in linux for various things to do, Because linux have power to do anything. So let’s see what exactly scree
      
    
    </summary>
    
      <category term="Linux" scheme="http://sanketgandhi.github.io/categories/Linux/"/>
    
    
      <category term="linux" scheme="http://sanketgandhi.github.io/tags/linux/"/>
    
  </entry>
  
</feed>
